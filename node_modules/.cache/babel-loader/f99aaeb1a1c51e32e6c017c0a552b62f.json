{"ast":null,"code":"var _jsxFileName = \"/home/jean/Trybe/projetos-Trybe/sd-06-project-trivia-react-redux/src/pages/Trivia/index.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Components/Header';\nimport { updateScore } from '../../redux/actions';\nimport './styles.css';\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.timerOut = this.timerOut.bind(this);\n    const questions = this.props.questions;\n    this.state = {\n      currentQuestion: 0,\n      lastQuestion: questions.length - 1,\n      answered: false,\n      timer: 30\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          userEmail = _this$props.userEmail,\n          name = _this$props.name;\n    const user = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: userEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(user));\n  }\n\n  handleAnswerClick({\n    timer,\n    difficulty,\n    correct\n  }) {\n    const setScore = this.props.setScore;\n\n    if (correct) {\n      setScore({\n        timer,\n        difficulty\n      });\n    }\n\n    this.setState({\n      answered: true\n    });\n  }\n\n  timerOut() {\n    const _this$state = this.state,\n          timer = _this$state.timer,\n          answered = _this$state.answered;\n    const oneSecond = 1000;\n\n    if (timer > 0 && !answered) {\n      const newTimer = timer - 1;\n      this.setState({\n        timer: timer - 1,\n        answered: newTimer === 0\n      });\n      setTimeout(this.timerOut, oneSecond);\n    }\n  }\n\n  render() {\n    const questions = this.props.questions;\n    const _this$state2 = this.state,\n          currentQuestion = _this$state2.currentQuestion,\n          lastQuestion = _this$state2.lastQuestion,\n          answered = _this$state2.answered,\n          timer = _this$state2.timer;\n    console.log(lastQuestion);\n\n    if (!questions[currentQuestion]) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Loading\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"trivia\",\n      onLoad: this.timerOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, timer), React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, questions[currentQuestion].category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, questions[currentQuestion].question), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, questions[currentQuestion].answers.map(({\n      correct,\n      answer\n    }) => {\n      const correctAnswerId = 'correct-answer';\n      const incorrectIndex = questions[currentQuestion].incorrect_answers.findIndex(a => a === answer);\n      const incorrectAnswerId = `wrong-answer-${incorrectIndex}`;\n      const difficulty = questions[currentQuestion].difficulty;\n      return React.createElement(\"div\", {\n        key: answer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: answered && (correct ? 'correct-answer' : 'wrong-answer'),\n        \"data-testid\": correct ? correctAnswerId : incorrectAnswerId,\n        onClick: () => this.handleAnswerClick({\n          timer,\n          correct,\n          difficulty\n        }),\n        disabled: answered,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, answer));\n    }))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userEmail: state.user.email,\n    avatar: state.user.avatar,\n    name: state.user.name,\n    questions: state.trivia.questions\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScore: ({\n      difficulty,\n      timer\n    }) => dispatch(updateScore({\n      difficulty,\n      timer\n    }))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    answers: PropTypes.arrayOf(PropTypes.shape({\n      answer: PropTypes.string.isRequired,\n      correct: PropTypes.bool.isRequired\n    })).isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired\n  })).isRequired\n};","map":{"version":3,"sources":["/home/jean/Trybe/projetos-Trybe/sd-06-project-trivia-react-redux/src/pages/Trivia/index.jsx"],"names":["React","connect","PropTypes","Header","updateScore","Trivia","Component","constructor","props","handleAnswerClick","bind","timerOut","questions","state","currentQuestion","lastQuestion","length","answered","timer","componentDidMount","userEmail","name","user","player","assertions","score","gravatarEmail","localStorage","setItem","JSON","stringify","difficulty","correct","setScore","setState","oneSecond","newTimer","setTimeout","render","console","log","category","question","answers","map","answer","correctAnswerId","incorrectIndex","incorrect_answers","findIndex","a","incorrectAnswerId","mapStateToProps","email","avatar","trivia","mapDispatchToProps","dispatch","propTypes","arrayOf","shape","string","isRequired","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Components/Header';\nimport { updateScore } from '../../redux/actions';\n\nimport './styles.css';\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.timerOut = this.timerOut.bind(this);\n\n    const { questions } = this.props;\n\n    this.state = {\n      currentQuestion: 0,\n      lastQuestion: questions.length - 1,\n      answered: false,\n      timer: 30,\n    };\n  }\n\n  componentDidMount() {\n    const { userEmail, name } = this.props;\n\n    const user = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: userEmail,\n      },\n    };\n\n    localStorage.setItem('state', JSON.stringify(user));\n  }\n\n  handleAnswerClick({ timer, difficulty, correct }) {\n    const { setScore } = this.props;\n\n    if (correct) {\n      setScore({ timer, difficulty });\n    }\n\n    this.setState({\n      answered: true,\n    });\n  }\n\n  timerOut() {\n    const { timer, answered } = this.state;\n    const oneSecond = 1000;\n    if (timer > 0 && !answered) {\n      const newTimer = timer - 1;\n\n      this.setState({\n        timer: timer - 1,\n        answered: (newTimer === 0),\n      });\n\n      setTimeout(this.timerOut, oneSecond);\n    }\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { currentQuestion, lastQuestion, answered, timer } = this.state;\n\n    console.log(lastQuestion);\n\n    if (!questions[currentQuestion]) {\n      return <div>Loading</div>;\n    }\n\n    return (\n      <div className=\"trivia\" onLoad={ this.timerOut }>\n        <Header />\n        <div>\n          <p>\n            { timer }\n          </p>\n          <span data-testid=\"question-category\">\n            { questions[currentQuestion].category }\n          </span>\n\n          <p data-testid=\"question-text\">{ questions[currentQuestion].question }</p>\n\n          <div>\n            { questions[currentQuestion].answers.map(({ correct, answer }) => {\n              const correctAnswerId = 'correct-answer';\n\n              const incorrectIndex = questions[currentQuestion]\n                .incorrect_answers.findIndex((a) => a === answer);\n\n              const incorrectAnswerId = `wrong-answer-${incorrectIndex}`;\n              const { difficulty } = questions[currentQuestion];\n\n              return (\n                <div key={ answer }>\n                  <button\n                    type=\"button\"\n                    className={ answered && (\n                      correct ? 'correct-answer' : 'wrong-answer'\n                    ) }\n                    data-testid={ correct ? correctAnswerId : incorrectAnswerId }\n                    onClick={ () => this.handleAnswerClick({\n                      timer,\n                      correct,\n                      difficulty,\n                    }) }\n                    disabled={ answered }\n                  >\n                    { answer }\n                  </button>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userEmail: state.user.email,\n    avatar: state.user.avatar,\n    name: state.user.name,\n    questions: state.trivia.questions,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScore: ({ difficulty, timer }) => dispatch(updateScore({\n      difficulty,\n      timer,\n    })),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    answers: PropTypes.arrayOf(PropTypes.shape({\n      answer: PropTypes.string.isRequired,\n      correct: PropTypes.bool.isRequired,\n    })).isRequired,\n    incorrect_answers: PropTypes.arrayOf(\n      PropTypes.string,\n    ).isRequired,\n  })).isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}