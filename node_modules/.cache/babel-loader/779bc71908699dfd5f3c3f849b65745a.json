{"ast":null,"code":"var _jsxFileName = \"/home/jean/projetos-pessoais-portifolio/Trivia_App/src/pages/Trivia/index.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Html5Entities } from 'html-entities';\nimport Header from '../../components/Header';\nimport Button from '../../components/Button';\nimport { updateScore } from '../../redux/actions';\nimport './styles.css';\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.timerOut = this.timerOut.bind(this);\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n    this.state = {\n      currentQuestion: 0,\n      answered: false,\n      timer: 30\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          userEmail = _this$props.userEmail,\n          name = _this$props.name;\n    const user = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: userEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(user));\n  }\n\n  handleAnswerClick({\n    timer,\n    difficulty,\n    correct\n  }) {\n    const setScore = this.props.setScore;\n\n    if (correct) {\n      setScore({\n        timer,\n        difficulty\n      });\n    }\n\n    this.setState({\n      answered: true\n    });\n  }\n\n  timerOut() {\n    const _this$state = this.state,\n          timer = _this$state.timer,\n          answered = _this$state.answered;\n    const oneSecond = 1000;\n\n    if (timer > 0 && !answered) {\n      const newTimer = timer - 1;\n      this.setState({\n        timer: timer - 1,\n        answered: newTimer === 0\n      });\n      setTimeout(this.timerOut, oneSecond);\n    }\n  }\n\n  handleNextQuestion() {\n    const currentQuestion = this.state.currentQuestion;\n    const _this$props2 = this.props,\n          history = _this$props2.history,\n          questions = _this$props2.questions;\n    const lastQuestion = questions.length - 1;\n\n    if (lastQuestion === currentQuestion) {\n      history.push('/results');\n    } else {\n      this.setState({\n        currentQuestion: currentQuestion + 1,\n        answered: false,\n        timer: 30\n      }, () => {\n        this.timerOut();\n      });\n    }\n  }\n\n  render() {\n    const questions = this.props.questions;\n    const _this$state2 = this.state,\n          currentQuestion = _this$state2.currentQuestion,\n          answered = _this$state2.answered,\n          timer = _this$state2.timer;\n    const tenSeconds = 10;\n\n    if (!questions[currentQuestion]) {\n      return React.createElement(\"div\", {\n        className: \"loading-trivia\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"loading-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ocean-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"continent-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"ocean-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"continent-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })));\n    }\n\n    const decoder = new Html5Entities();\n    return React.createElement(\"div\", {\n      className: \"trivia-game\",\n      onLoad: this.timerOut,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"trivia-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"trivia\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: `${timer < tenSeconds ? 'timeup' : ''}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, timer), React.createElement(\"h2\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, decoder.decode(questions[currentQuestion].question)), React.createElement(\"div\", {\n      className: \"trivia-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Categoria:\", React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, questions[currentQuestion].category)), React.createElement(\"div\", {\n      className: \"trivia-questions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, questions[currentQuestion].answers.map(({\n      correct,\n      answer\n    }) => {\n      const correctAnswerId = 'correct-answer';\n      const incorrectIndex = questions[currentQuestion].incorrect_answers.findIndex(a => a === answer);\n      const incorrectAnswerId = `wrong-answer-${incorrectIndex}`;\n      const difficulty = questions[currentQuestion].difficulty;\n      return React.createElement(\"div\", {\n        key: answer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: answered && (correct ? 'correct-answer' : 'wrong-answer'),\n        \"data-testid\": correct ? correctAnswerId : incorrectAnswerId,\n        onClick: () => this.handleAnswerClick({\n          timer,\n          correct,\n          difficulty\n        }),\n        disabled: answered,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, decoder.decode(answer)));\n    })), answered && React.createElement(Button, {\n      onClick: this.handleNextQuestion,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Proxima\"))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userEmail: state.user.email,\n    avatar: state.user.avatar,\n    name: state.user.name,\n    questions: state.trivia.questions\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScore: ({\n      difficulty,\n      timer\n    }) => dispatch(updateScore({\n      difficulty,\n      timer\n    }))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    answers: PropTypes.arrayOf(PropTypes.shape({\n      answer: PropTypes.string.isRequired,\n      correct: PropTypes.bool.isRequired\n    })).isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string).isRequired\n  })).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  userEmail: PropTypes.string.isRequired,\n  setScore: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/jean/projetos-pessoais-portifolio/Trivia_App/src/pages/Trivia/index.jsx"],"names":["React","connect","PropTypes","Html5Entities","Header","Button","updateScore","Trivia","Component","constructor","props","handleAnswerClick","bind","timerOut","handleNextQuestion","state","currentQuestion","answered","timer","componentDidMount","userEmail","name","user","player","assertions","score","gravatarEmail","localStorage","setItem","JSON","stringify","difficulty","correct","setScore","setState","oneSecond","newTimer","setTimeout","history","questions","lastQuestion","length","push","render","tenSeconds","decoder","decode","question","category","answers","map","answer","correctAnswerId","incorrectIndex","incorrect_answers","findIndex","a","incorrectAnswerId","mapStateToProps","email","avatar","trivia","mapDispatchToProps","dispatch","propTypes","arrayOf","shape","string","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Html5Entities } from 'html-entities';\n\nimport Header from '../../components/Header';\nimport Button from '../../components/Button';\n\nimport { updateScore } from '../../redux/actions';\n\nimport './styles.css';\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAnswerClick = this.handleAnswerClick.bind(this);\n    this.timerOut = this.timerOut.bind(this);\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n\n    this.state = {\n      currentQuestion: 0,\n      answered: false,\n      timer: 30,\n    };\n  }\n\n  componentDidMount() {\n    const { userEmail, name } = this.props;\n\n    const user = {\n      player: {\n        name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: userEmail,\n      },\n    };\n\n    localStorage.setItem('state', JSON.stringify(user));\n  }\n\n  handleAnswerClick({ timer, difficulty, correct }) {\n    const { setScore } = this.props;\n\n    if (correct) {\n      setScore({ timer, difficulty });\n    }\n\n    this.setState({\n      answered: true,\n    });\n  }\n\n  timerOut() {\n    const { timer, answered } = this.state;\n    const oneSecond = 1000;\n\n    if (timer > 0 && !answered) {\n      const newTimer = timer - 1;\n\n      this.setState({\n        timer: timer - 1,\n        answered: (newTimer === 0),\n      });\n\n      setTimeout(this.timerOut, oneSecond);\n    }\n  }\n\n  handleNextQuestion() {\n    const { currentQuestion } = this.state;\n    const { history, questions } = this.props;\n\n    const lastQuestion = questions.length - 1;\n\n    if (lastQuestion === currentQuestion) {\n      history.push('/results');\n    } else {\n      this.setState({\n        currentQuestion: currentQuestion + 1,\n        answered: false,\n        timer: 30,\n      }, () => {\n        this.timerOut();\n      });\n    }\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { currentQuestion, answered, timer } = this.state;\n\n    const tenSeconds = 10;\n\n    if (!questions[currentQuestion]) {\n      return (\n        <div className=\"loading-trivia\">\n          <div className=\"loading-container\">\n            <div className=\"ocean-blue\" />\n            <div className=\"continent-blue\" />\n            <div className=\"ocean-blue\" />\n            <div className=\"continent-blue\" />\n          </div>\n        </div>\n      );\n    }\n\n    const decoder = new Html5Entities();\n\n    return (\n      <div className=\"trivia-game\" onLoad={ this.timerOut }>\n        <Header />\n\n        <div className=\"trivia-container\">\n          <div className=\"trivia\">\n            <p className={ `${timer < tenSeconds ? 'timeup' : ''}` }>\n              { timer }\n            </p>\n\n            <h2\n              data-testid=\"question-text\"\n            >\n              { decoder.decode(questions[currentQuestion].question) }\n            </h2>\n\n            <div className=\"trivia-category\">\n              Categoria:\n              <span data-testid=\"question-category\">\n                { questions[currentQuestion].category }\n              </span>\n            </div>\n\n            <div className=\"trivia-questions\">\n              { questions[currentQuestion].answers.map(({ correct, answer }) => {\n                const correctAnswerId = 'correct-answer';\n\n                const incorrectIndex = questions[currentQuestion]\n                  .incorrect_answers.findIndex((a) => a === answer);\n\n                const incorrectAnswerId = `wrong-answer-${incorrectIndex}`;\n                const { difficulty } = questions[currentQuestion];\n\n                return (\n                  <div key={ answer }>\n                    <button\n                      type=\"button\"\n                      className={ answered && (\n                        correct ? 'correct-answer' : 'wrong-answer'\n                      ) }\n                      data-testid={ correct ? correctAnswerId : incorrectAnswerId }\n                      onClick={ () => this.handleAnswerClick({\n                        timer,\n                        correct,\n                        difficulty,\n                      }) }\n                      disabled={ answered }\n                    >\n                      { decoder.decode(answer) }\n                    </button>\n                  </div>\n                );\n              })}\n            </div>\n\n            { answered && (\n              <Button\n                onClick={ this.handleNextQuestion }\n                type=\"button\"\n                data-testid=\"btn-next\"\n              >\n                  Proxima\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userEmail: state.user.email,\n    avatar: state.user.avatar,\n    name: state.user.name,\n    questions: state.trivia.questions,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setScore: ({ difficulty, timer }) => dispatch(updateScore({\n      difficulty,\n      timer,\n    })),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trivia);\n\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    answers: PropTypes.arrayOf(PropTypes.shape({\n      answer: PropTypes.string.isRequired,\n      correct: PropTypes.bool.isRequired,\n    })).isRequired,\n    incorrect_answers: PropTypes.arrayOf(\n      PropTypes.string,\n    ).isRequired,\n  })).isRequired,\n\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n\n  name: PropTypes.string.isRequired,\n\n  userEmail: PropTypes.string.isRequired,\n\n  setScore: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}