{"ast":null,"code":"import _objectSpread from \"/home/jean/Trybe/projetos-Trybe/sd-06-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport md5 from 'crypto-js/md5';\nimport { getAccessToken, getTriviaQuestion } from '../../services/triviaApi';\nexport const LOGIN = 'LOGIN';\nexport function loginActionCreator({\n  name,\n  email\n}) {\n  const hashedEmail = md5(email);\n  const avatar = `https://www.gravatar.com/avatar/${hashedEmail}`;\n  return {\n    type: LOGIN,\n    payload: {\n      name,\n      email,\n      avatar\n    }\n  };\n}\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\n\nfunction loadQuestions({\n  questions,\n  token\n}) {\n  return {\n    type: GET_QUESTIONS,\n    payload: {\n      questions,\n      token\n    }\n  };\n}\n\nexport function fetchQuestions(token, config) {\n  return async dispatch => {\n    let validToken = token;\n\n    if (!validToken) {\n      validToken = await getAccessToken();\n      localStorage.setItem('token', validToken);\n    }\n\n    let questions = await getTriviaQuestion(validToken, config);\n\n    if (!questions.length) {\n      validToken = await getAccessToken();\n      questions = await getTriviaQuestion(validToken, config);\n      localStorage.setItem('token', validToken);\n    }\n\n    questions = questions.map(question => {\n      const correctAnswer = {\n        answer: question.correct_answer,\n        correct: true\n      };\n      const incorrectAnswers = question.incorrect_answers.map(incorrect => ({\n        answer: incorrect,\n        correct: false\n      }));\n      const answers = [...incorrectAnswers, correctAnswer];\n      const randomizer = 0.5;\n      answers.sort(() => Math.random() - randomizer);\n      return _objectSpread({}, question, {\n        answers\n      });\n    });\n    dispatch(loadQuestions({\n      questions,\n      token: validToken\n    }));\n  };\n}\nexport const SCORED = 'SCORED';\n\nfunction parseDifficulty(difficulty) {\n  const EASY = 'easy';\n  const MEDIUM = 'medium';\n  const HARD = 'hard';\n  const hardGrade = 3;\n\n  switch (difficulty) {\n    case EASY:\n      return 1;\n\n    case MEDIUM:\n      return 2;\n\n    case HARD:\n      return hardGrade;\n\n    default:\n      return 0;\n  }\n}\n\nexport function updateScore({\n  difficulty,\n  timer\n}) {\n  const baseScore = 10;\n  const addScore = baseScore + timer * parseDifficulty(difficulty);\n  const oldUserInfo = JSON.parse(localStorage.getItem('state'));\n  const _oldUserInfo$player = oldUserInfo.player,\n        assertions = _oldUserInfo$player.assertions,\n        oldScore = _oldUserInfo$player.score;\n  const newUserInfo = {\n    player: _objectSpread({}, oldUserInfo.player, {\n      score: oldScore + addScore,\n      assertions: assertions + 1\n    })\n  };\n  localStorage.setItem('state', JSON.stringify(newUserInfo));\n  return {\n    type: SCORED,\n    payload: {\n      addScore\n    }\n  };\n}\nexport const CONFIG = 'CONFIG';\nexport function updateSettings({\n  amount,\n  difficulty,\n  type,\n  category\n}) {\n  return {\n    type: CONFIG,\n    payload: {\n      config: {\n        amount,\n        difficulty,\n        type,\n        category\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/home/jean/Trybe/projetos-Trybe/sd-06-project-trivia-react-redux/src/redux/actions/index.js"],"names":["md5","getAccessToken","getTriviaQuestion","LOGIN","loginActionCreator","name","email","hashedEmail","avatar","type","payload","GET_QUESTIONS","loadQuestions","questions","token","fetchQuestions","config","dispatch","validToken","localStorage","setItem","length","map","question","correctAnswer","answer","correct_answer","correct","incorrectAnswers","incorrect_answers","incorrect","answers","randomizer","sort","Math","random","SCORED","parseDifficulty","difficulty","EASY","MEDIUM","HARD","hardGrade","updateScore","timer","baseScore","addScore","oldUserInfo","JSON","parse","getItem","player","assertions","oldScore","score","newUserInfo","stringify","CONFIG","updateSettings","amount","category"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,eAAhB;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,0BAAlD;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAd;AAEP,OAAO,SAASC,kBAAT,CAA4B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA5B,EAA6C;AAClD,QAAMC,WAAW,GAAGP,GAAG,CAACM,KAAD,CAAvB;AACA,QAAME,MAAM,GAAI,mCAAkCD,WAAY,EAA9D;AAEA,SAAO;AACLE,IAAAA,IAAI,EAAEN,KADD;AAELO,IAAAA,OAAO,EAAE;AACPL,MAAAA,IADO;AAEPC,MAAAA,KAFO;AAGPE,MAAAA;AAHO;AAFJ,GAAP;AAQD;AAED,OAAO,MAAMG,aAAa,GAAG,eAAtB;;AAEP,SAASC,aAAT,CAAuB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAvB,EAA6C;AAC3C,SAAO;AACLL,IAAAA,IAAI,EAAEE,aADD;AAELD,IAAAA,OAAO,EAAE;AACPG,MAAAA,SADO;AAEPC,MAAAA;AAFO;AAFJ,GAAP;AAOD;;AAED,OAAO,SAASC,cAAT,CAAwBD,KAAxB,EAA+BE,MAA/B,EAAuC;AAC5C,SACE,MAAOC,QAAP,IAAoB;AAClB,QAAIC,UAAU,GAAGJ,KAAjB;;AAEA,QAAI,CAACI,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,MAAMjB,cAAc,EAAjC;AACAkB,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,UAA9B;AACD;;AAED,QAAIL,SAAS,GAAG,MAAMX,iBAAiB,CAACgB,UAAD,EAAaF,MAAb,CAAvC;;AAEA,QAAI,CAACH,SAAS,CAACQ,MAAf,EAAuB;AACrBH,MAAAA,UAAU,GAAG,MAAMjB,cAAc,EAAjC;AACAY,MAAAA,SAAS,GAAG,MAAMX,iBAAiB,CAACgB,UAAD,EAAaF,MAAb,CAAnC;AACAG,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,UAA9B;AACD;;AAEDL,IAAAA,SAAS,GAAGA,SAAS,CAACS,GAAV,CAAeC,QAAD,IAAc;AACtC,YAAMC,aAAa,GAAG;AACpBC,QAAAA,MAAM,EAAEF,QAAQ,CAACG,cADG;AAEpBC,QAAAA,OAAO,EAAE;AAFW,OAAtB;AAIA,YAAMC,gBAAgB,GAAGL,QAAQ,CAACM,iBAAT,CAA2BP,GAA3B,CAAgCQ,SAAD,KAAgB;AACtEL,QAAAA,MAAM,EAAEK,SAD8D;AAEtEH,QAAAA,OAAO,EAAE;AAF6D,OAAhB,CAA/B,CAAzB;AAIA,YAAMI,OAAO,GAAG,CAAC,GAAGH,gBAAJ,EAAsBJ,aAAtB,CAAhB;AACA,YAAMQ,UAAU,GAAG,GAAnB;AACAD,MAAAA,OAAO,CAACE,IAAR,CAAa,MAAMC,IAAI,CAACC,MAAL,KAAgBH,UAAnC;AACA,+BAAYT,QAAZ;AAAsBQ,QAAAA;AAAtB;AACD,KAbW,CAAZ;AAeAd,IAAAA,QAAQ,CAACL,aAAa,CAAC;AACrBC,MAAAA,SADqB;AAErBC,MAAAA,KAAK,EAAEI;AAFc,KAAD,CAAd,CAAR;AAID,GApCH;AAsCD;AAED,OAAO,MAAMkB,MAAM,GAAG,QAAf;;AAEP,SAASC,eAAT,CAAyBC,UAAzB,EAAqC;AACnC,QAAMC,IAAI,GAAG,MAAb;AACA,QAAMC,MAAM,GAAG,QAAf;AACA,QAAMC,IAAI,GAAG,MAAb;AACA,QAAMC,SAAS,GAAG,CAAlB;;AAEA,UAAQJ,UAAR;AACA,SAAKC,IAAL;AACE,aAAO,CAAP;;AACF,SAAKC,MAAL;AACE,aAAO,CAAP;;AACF,SAAKC,IAAL;AACE,aAAOC,SAAP;;AACF;AACE,aAAO,CAAP;AARF;AAUD;;AAED,OAAO,SAASC,WAAT,CAAqB;AAAEL,EAAAA,UAAF;AAAcM,EAAAA;AAAd,CAArB,EAA4C;AACjD,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,QAAQ,GAAGD,SAAS,GAAID,KAAK,GAAGP,eAAe,CAACC,UAAD,CAArD;AACA,QAAMS,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW9B,YAAY,CAAC+B,OAAb,CAAqB,OAArB,CAAX,CAApB;AAHiD,8BAITH,WAAW,CAACI,MAJH;AAAA,QAIzCC,UAJyC,uBAIzCA,UAJyC;AAAA,QAItBC,QAJsB,uBAI7BC,KAJ6B;AAKjD,QAAMC,WAAW,GAAG;AAClBJ,IAAAA,MAAM,oBACDJ,WAAW,CAACI,MADX;AAEJG,MAAAA,KAAK,EAAED,QAAQ,GAAGP,QAFd;AAGJM,MAAAA,UAAU,EAAEA,UAAU,GAAG;AAHrB;AADY,GAApB;AAQAjC,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B4B,IAAI,CAACQ,SAAL,CAAeD,WAAf,CAA9B;AAEA,SAAO;AACL9C,IAAAA,IAAI,EAAE2B,MADD;AAEL1B,IAAAA,OAAO,EAAE;AACPoC,MAAAA;AADO;AAFJ,GAAP;AAMD;AAED,OAAO,MAAMW,MAAM,GAAG,QAAf;AAEP,OAAO,SAASC,cAAT,CAAwB;AAAEC,EAAAA,MAAF;AAAUrB,EAAAA,UAAV;AAAsB7B,EAAAA,IAAtB;AAA4BmD,EAAAA;AAA5B,CAAxB,EAAgE;AACrE,SAAO;AACLnD,IAAAA,IAAI,EAAEgD,MADD;AAEL/C,IAAAA,OAAO,EAAE;AACPM,MAAAA,MAAM,EAAE;AACN2C,QAAAA,MADM;AAENrB,QAAAA,UAFM;AAGN7B,QAAAA,IAHM;AAINmD,QAAAA;AAJM;AADD;AAFJ,GAAP;AAWD","sourcesContent":["import md5 from 'crypto-js/md5';\nimport { getAccessToken, getTriviaQuestion } from '../../services/triviaApi';\n\nexport const LOGIN = 'LOGIN';\n\nexport function loginActionCreator({ name, email }) {\n  const hashedEmail = md5(email);\n  const avatar = `https://www.gravatar.com/avatar/${hashedEmail}`;\n\n  return {\n    type: LOGIN,\n    payload: {\n      name,\n      email,\n      avatar,\n    },\n  };\n}\n\nexport const GET_QUESTIONS = 'GET_QUESTIONS';\n\nfunction loadQuestions({ questions, token }) {\n  return {\n    type: GET_QUESTIONS,\n    payload: {\n      questions,\n      token,\n    },\n  };\n}\n\nexport function fetchQuestions(token, config) {\n  return (\n    async (dispatch) => {\n      let validToken = token;\n\n      if (!validToken) {\n        validToken = await getAccessToken();\n        localStorage.setItem('token', validToken);\n      }\n\n      let questions = await getTriviaQuestion(validToken, config);\n\n      if (!questions.length) {\n        validToken = await getAccessToken();\n        questions = await getTriviaQuestion(validToken, config);\n        localStorage.setItem('token', validToken);\n      }\n\n      questions = questions.map((question) => {\n        const correctAnswer = {\n          answer: question.correct_answer,\n          correct: true,\n        };\n        const incorrectAnswers = question.incorrect_answers.map((incorrect) => ({\n          answer: incorrect,\n          correct: false,\n        }));\n        const answers = [...incorrectAnswers, correctAnswer];\n        const randomizer = 0.5;\n        answers.sort(() => Math.random() - randomizer);\n        return { ...question, answers };\n      });\n\n      dispatch(loadQuestions({\n        questions,\n        token: validToken,\n      }));\n    }\n  );\n}\n\nexport const SCORED = 'SCORED';\n\nfunction parseDifficulty(difficulty) {\n  const EASY = 'easy';\n  const MEDIUM = 'medium';\n  const HARD = 'hard';\n  const hardGrade = 3;\n\n  switch (difficulty) {\n  case EASY:\n    return 1;\n  case MEDIUM:\n    return 2;\n  case HARD:\n    return hardGrade;\n  default:\n    return 0;\n  }\n}\n\nexport function updateScore({ difficulty, timer }) {\n  const baseScore = 10;\n  const addScore = baseScore + (timer * parseDifficulty(difficulty));\n  const oldUserInfo = JSON.parse(localStorage.getItem('state'));\n  const { assertions, score: oldScore } = oldUserInfo.player;\n  const newUserInfo = {\n    player: {\n      ...oldUserInfo.player,\n      score: oldScore + addScore,\n      assertions: assertions + 1,\n    },\n  };\n\n  localStorage.setItem('state', JSON.stringify(newUserInfo));\n\n  return {\n    type: SCORED,\n    payload: {\n      addScore,\n    },\n  };\n}\n\nexport const CONFIG = 'CONFIG';\n\nexport function updateSettings({ amount, difficulty, type, category }) {\n  return {\n    type: CONFIG,\n    payload: {\n      config: {\n        amount,\n        difficulty,\n        type,\n        category,\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}